/* xmlrpc_config.h is generated from xmlrpc_config.h.in by 'configure'.

   The purpose of this file is to define stuff particular to the build
   environment being used to build Xmlrpc-c.  Xmlrpc-c source files can
   #include this file and have build-environment-independent source code.

   A major goal of this file is to reduce conditional compilation in
   the other source files as much as possible.  Even more, we want to avoid
   having to generate source code particular to to a build environment
   except in this file.   

   This file is NOT meant to be used by any code outside of the
   Xmlrpc-c source tree.  There is a similar file that gets installed
   as <xmlrpc-c/config.h> that performs the same function for Xmlrpc-c
   interface header files that get compiled as part of a user's program.

   This file just uses plain AC_SUBST substitution, the same as
   Makefile.config.  Wherever you see @XXX@, that gets replaced by the
   value of 'configure' variable XXX.

   Logical macros are 0 or 1 instead of the more traditional defined and
   undefined.  That's so we can distinguish when compiling code between
   "false" and some problem with the code.
*/

#ifndef XMLRPC_CONFIG_H_INCLUDED
#define XMLRPC_CONFIG_H_INCLUDED

/* We hope to replace xmlrpc_amconfig.h some day with something that 
   doesn't require a whole special set of software to build, to make
   Xmlrpc-c approachable by dumber developers.
*/
#include "xmlrpc_amconfig.h"


#define HAVE_WCHAR_H @HAVE_WCHAR_H_DEFINE@
#define HAVE_SYS_FILIO_H @HAVE_SYS_FILIO_H_DEFINE@
#define HAVE_SYS_IOCTL_H @HAVE_SYS_IOCTL_H_DEFINE@

#define VA_LIST_IS_ARRAY @VA_LIST_IS_ARRAY_DEFINE@

#define HAVE_LIBWWW_SSL @HAVE_LIBWWW_SSL_DEFINE@

/* Used to mark an unused function parameter */
#define ATTR_UNUSED @ATTR_UNUSED@

#define DIRECTORY_SEPARATOR "@DIRECTORY_SEPARATOR@"

#define HAVE_UNICODE_WCHAR HAVE_WCHAR_H

/*  Xmlrpc-c code uses __inline__ to declare functions that should
    be compiled as inline code.  GNU C recognizes the __inline__ keyword.
    Others recognize 'inline' or '__inline' or nothing at all to say
    a function should be inlined.

    We could make 'configure' simply do a trial compile to figure out
    which one, but for now, this approximation is easier:
*/
#if (!defined(__GNUC__))
  #if (!defined(__inline__))
    #if (defined(__sgi) || defined(_AIX) || defined(_MSC_VER))
      #define __inline__ __inline
    #else   
      #define __inline__
    #endif
  #endif
#endif

/* MSVCRT means we're using the Microsoft Visual C++ runtime library */

#ifdef _MSC_VER
/* The compiler is Microsoft Visual C++. */
  #define MSVCRT 1
#else
  #define MSVCRT 0
#endif


#endif
